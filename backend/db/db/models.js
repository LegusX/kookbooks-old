import { DataTypes } from "sequelize";

export default function (sql) {
	const User = userModel(sql);
	const Book = bookModel(sql);
	const Recipe = recipeModel(sql);
	const Image = imageModel(sql);
	const Ingredient = ingredientModel(sql);

	//Associations
	//User ownership of book
	User.hasMany(Book);
	Book.belongsTo(User);

	//User ownership of recipe
	User.hasMany(Recipe);
	Recipe.belongsTo(User);

	//Recipe inclusion in books
	Recipe.belongsToMany(Book);
	Book.belongsToMany(Recipe);

	//Image inclusion in recipes
	Image.belongsTo(Recipe);
	Recipe.hasMany(Image);

	//User ownership of an image
	Image.belongsTo(User);
	User.hasMany(Image);

	//ingredient inclusion in recipes
	Recipe.hasMany(Ingredient);
	Ingredient.hasMany(Recipe);

	return {
		User,
		Book,
		Recipe,
		Image,
		Ingredient,
	};
}

function userModel(sql) {
	const Model = sql.define("User", {
		id: {
			type: DataTypes.UUIDV4,
			defaultValue: DataTypes.UUIDV4,
		},
		name: {
			type: DataTypes.STRING,
			allowNull: false,
		},
		//Username with a max length of 15 characters
		username: {
			type: DataTypes.STRING,
			allowNull: false,
			unique: true,
		},
		//Password of length 60. hash generated by bcrypt
		password: {
			type: DataTypes.STRING,
		},
		email: {
			type: DataTypes.STRING,
		},
	});

	class User extends Model {
		async getUser(id) {
			let users = await this.findAll({
				where: {
					id: id,
				},
			});
			return users[0];
		}
	}

	return User;
}

function bookModel(sql) {
	const Model = sql.define("Book", {
		id: {
			type: DataTypes.UUIDV4,
			defaultValue: DataTypes.UUIDV4,
		},
		name: {
			type: DataTypes.STRING,
			allowNull: false,
		},
		description: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	class Book extends Model {}

	return Book;
}

function recipeModel(sql) {
	const Model = sql.define("Recipe", {
		id: {
			type: DataTypes.UUIDV4,
			defaultValue: DataTypes.UUIDV4,
		},
		name: {
			type: DataTypes.STRING,
			allowNull: false,
		},
		text: {
			type: DataTypes.TEXT,
			allowNull: false,
		},
	});

	class Recipe extends Model {}

	return Recipe;
}

function imageModel(sql) {
	const Model = sql.define("Image", {
		id: {
			type: DataTypes.UUIDV4,
			defaultValue: DataTypes.UUIDV4,
		},
		size: {
			type: DataTypes.INTEGER,
			allowNull: false,
		},
	});

	class Image extends Model {}

	return Image;
}

function ingredientModel(sql) {
	const Model = sql.define("Image", {
		id: {
			type: DataTypes.UUIDV4,
			defaultValue: DataTypes.UUIDV4,
		},
		name: {
			type: DataTypes.STRING(32),
			allowNull: false,
		},
	});

	class Ingredient extends Model {}

	return Ingredient;
}
